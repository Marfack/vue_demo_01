{"remainingRequest":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\VSCodeProjects\\Demo\\demo_01\\src\\views\\comprehensive_evaluation\\CompEvaluation.vue?vue&type=style&index=0&id=7dcc8dfc&scoped=true&lang=css","dependencies":[{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\src\\views\\comprehensive_evaluation\\CompEvaluation.vue","mtime":1632503284564},{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\css-loader\\dist\\cjs.js","mtime":1632030582501},{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1632030588307},{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\postcss-loader\\src\\index.js","mtime":1632030584172},{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632030581148},{"path":"D:\\VSCodeProjects\\Demo\\demo_01\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632030586808}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudmlld3Mgew0KICBwYWRkaW5nOiA4MHB4IDEwMHB4IDQwMHB4IDEwMHB4Ow0KfQ0K"},{"version":3,"sources":["D:\\VSCodeProjects\\Demo\\demo_01\\src\\views\\comprehensive_evaluation\\CompEvaluation.vue"],"names":[],"mappings":";AAiLA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC","file":"D:/VSCodeProjects/Demo/demo_01/src/views/comprehensive_evaluation/CompEvaluation.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <el-scrollbar>\r\n    <div class=\"views\" v-if=\"!$store.state.loading\">\r\n      <word-cloud :wordFrequency=\"wordFrequency\"></word-cloud>\r\n      <score :platform=\"platform\" :score=\"score\"></score>\r\n      <spot-avg-score :spotAvgScore=\"avgViewScore\"></spot-avg-score>\r\n      <avg-score :time=\"time\" :avgScore=\"avgScore\"></avg-score>\r\n      <spot-avg-sentiment\r\n        :time=\"time\"\r\n        :spotAvgSentiment=\"spotAvgSentiment\"\r\n      ></spot-avg-sentiment>\r\n      <spot-avg-line :time=\"time\" :spotAvgLine=\"spotAvgLine\"></spot-avg-line>\r\n    </div>\r\n  </el-scrollbar>\r\n</template>\r\n\r\n<script>\r\nimport WordCloud from './charts/WordCloud'\r\nimport SpotAvgScore from './charts/SpotAvgScore'\r\nimport AvgScore from './charts/AvgScore'\r\nimport SpotAvgSentiment from './charts/SpotAvgSentiment'\r\nimport Score from './charts/Score'\r\nimport SpotAvgLine from './charts/SpotAvgLine'\r\nimport { getDataById } from '@/network/compEvaluationData'\r\nexport default {\r\n  name: 'CompEvaluation',\r\n  components: {\r\n    WordCloud,\r\n    SpotAvgScore,\r\n    AvgScore,\r\n    SpotAvgSentiment,\r\n    Score,\r\n    SpotAvgLine\r\n  },\r\n  data() {\r\n    return {\r\n      index: 2,\r\n      data: []\r\n    }\r\n  },\r\n  props: {\r\n    spots: Array,\r\n    reload: Boolean\r\n  },\r\n  computed: {\r\n    platform: {\r\n      get() {\r\n        return this.data[0].map(item => {\r\n          return item.platform\r\n        })\r\n      }\r\n    },\r\n    score: {\r\n      get() {\r\n        return this.data[0].map(item => {\r\n          return item.score\r\n        })\r\n      }\r\n    },\r\n    wordFrequency: {\r\n      get() {\r\n        return this.data[1].word_frequency.map((item) => {\r\n          return {\r\n            name: item.word,\r\n            value: item.count\r\n          }\r\n        })\r\n      }\r\n    },\r\n    spotAvgScore: {\r\n      get() {\r\n        return this.data[2].monthly_score_info\r\n      }\r\n    },\r\n    avgViewScore: {\r\n      get() {\r\n        return this.spotAvgScore.map(item => {\r\n          return {\r\n            name: item[0].substring(0, 4) + '-' + item[0].substring(4),\r\n            value: [\r\n              item[2],\r\n              item[3],\r\n              item[4]\r\n            ]\r\n          }\r\n        })\r\n      }\r\n    },\r\n    time: {\r\n      get() {\r\n        return this.spotAvgScore.map(item => {\r\n          return item[0].substring(0, 4) + '-' + item[0].substring(4)\r\n        })\r\n      }\r\n    },\r\n    avgScore: {\r\n      get() {\r\n        return this.spotAvgScore.map(item => {\r\n          return item[1]\r\n        })\r\n      }\r\n    },\r\n    spotAvgSentiment: {\r\n      get() {\r\n        return this.data[3].monthly_sentiment_info.map(item => {\r\n          return item[1]\r\n        })\r\n      }\r\n    },\r\n    spotAvgLine: {\r\n      get() {\r\n        return [\r\n          {\r\n            name: '景色',\r\n            type: 'line',\r\n            data: this.spotAvgScore.map(item => {\r\n              return item[2]\r\n            }),\r\n            itemStyle: {\r\n              color: '#CC4444'\r\n            }\r\n          },\r\n          {\r\n            name: '有趣度',\r\n            type: 'line',\r\n            data: this.spotAvgScore.map(item => {\r\n              return item[3]\r\n            }),\r\n            itemStyle: {\r\n              color: '#44CC44'\r\n            }\r\n          },\r\n          {\r\n            name: '性价比',\r\n            type: 'line',\r\n            data: this.spotAvgScore.map(item => {\r\n              return item[4]\r\n            }),\r\n            itemStyle: {\r\n              color: '#4444CC'\r\n            }\r\n          },\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    getData() {\r\n      this.data.splice(0, this.data.length)\r\n      this.$store.dispatch('asyncSetLoading', true)\r\n      this.$store.dispatch('asyncChangeCurrentView', this.index)\r\n      getDataById(this.spots[this.$store.state.currentSpotIndex].id).then(res => {\r\n        for (let data of res) {\r\n          data = data.data\r\n          if (data.status != 200) {\r\n            this.$router.push('/404')\r\n          }\r\n          this.data.push(data.data)\r\n        }\r\n        this.$store.dispatch('asyncSetLoading', false)\r\n      })\r\n    }\r\n  },\r\n  watch: {\r\n    reload() {\r\n      this.getData()\r\n    }\r\n  },\r\n  created() {\r\n    this.getData()\r\n  },\r\n  mounted() {\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.views {\r\n  padding: 80px 100px 400px 100px;\r\n}\r\n</style>"]}]}